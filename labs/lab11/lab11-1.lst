     1                                  ;--------------------------------
     2                                  ; Запись в файл строки введененой на запрос
     3                                  ;--------------------------------
     4                                  %include 'in_out.asm'
     5                              <1> ;---------------   slen  -------------------
     6                              <1> ; Функция вычисления длины сообщения
     7                              <1> slen:                     
     8 00000000 53                  <1>     push    ebx             
     9 00000001 89C3                <1>     mov     ebx, eax        
    10                              <1>     
    11                              <1> nextchar:                   
    12 00000003 803800              <1>     cmp     byte [eax], 0   
    13 00000006 7403                <1>     jz      finished        
    14 00000008 40                  <1>     inc     eax             
    15 00000009 EBF8                <1>     jmp     nextchar        
    16                              <1>     
    17                              <1> finished:
    18 0000000B 29D8                <1>     sub     eax, ebx
    19 0000000D 5B                  <1>     pop     ebx             
    20 0000000E C3                  <1>     ret                     
    21                              <1> 
    22                              <1> 
    23                              <1> ;---------------  sprint  -------------------
    24                              <1> ; Функция печати сообщения
    25                              <1> ; входные данные: mov eax,<message>
    26                              <1> sprint:
    27 0000000F 52                  <1>     push    edx
    28 00000010 51                  <1>     push    ecx
    29 00000011 53                  <1>     push    ebx
    30 00000012 50                  <1>     push    eax
    31 00000013 E8E8FFFFFF          <1>     call    slen
    32                              <1>     
    33 00000018 89C2                <1>     mov     edx, eax
    34 0000001A 58                  <1>     pop     eax
    35                              <1>     
    36 0000001B 89C1                <1>     mov     ecx, eax
    37 0000001D BB01000000          <1>     mov     ebx, 1
    38 00000022 B804000000          <1>     mov     eax, 4
    39 00000027 CD80                <1>     int     80h
    40                              <1> 
    41 00000029 5B                  <1>     pop     ebx
    42 0000002A 59                  <1>     pop     ecx
    43 0000002B 5A                  <1>     pop     edx
    44 0000002C C3                  <1>     ret
    45                              <1> 
    46                              <1> 
    47                              <1> ;----------------  sprintLF  ----------------
    48                              <1> ; Функция печати сообщения с переводом строки
    49                              <1> ; входные данные: mov eax,<message>
    50                              <1> sprintLF:
    51 0000002D E8DDFFFFFF          <1>     call    sprint
    52                              <1> 
    53 00000032 50                  <1>     push    eax
    54 00000033 B80A000000          <1>     mov     eax, 0AH
    55 00000038 50                  <1>     push    eax
    56 00000039 89E0                <1>     mov     eax, esp
    57 0000003B E8CFFFFFFF          <1>     call    sprint
    58 00000040 58                  <1>     pop     eax
    59 00000041 58                  <1>     pop     eax
    60 00000042 C3                  <1>     ret
    61                              <1> 
    62                              <1> ;---------------  sread  ----------------------
    63                              <1> ; Функция считывания сообщения
    64                              <1> ; входные данные: mov eax,<buffer>, mov ebx,<N>
    65                              <1> sread:
    66 00000043 53                  <1>     push    ebx
    67 00000044 50                  <1>     push    eax
    68                              <1>    
    69 00000045 BB00000000          <1>     mov     ebx, 0
    70 0000004A B803000000          <1>     mov     eax, 3
    71 0000004F CD80                <1>     int     80h
    72                              <1> 
    73 00000051 5B                  <1>     pop     ebx
    74 00000052 59                  <1>     pop     ecx
    75 00000053 C3                  <1>     ret
    76                              <1>     
    77                              <1> ;------------- iprint  ---------------------
    78                              <1> ; Функция вывода на экран чисел в формате ASCII
    79                              <1> ; входные данные: mov eax,<int>
    80                              <1> iprint:
    81 00000054 50                  <1>     push    eax             
    82 00000055 51                  <1>     push    ecx             
    83 00000056 52                  <1>     push    edx             
    84 00000057 56                  <1>     push    esi             
    85 00000058 B900000000          <1>     mov     ecx, 0          
    86                              <1>     
    87                              <1> divideLoop:
    88 0000005D 41                  <1>     inc     ecx             
    89 0000005E BA00000000          <1>     mov     edx, 0          
    90 00000063 BE0A000000          <1>     mov     esi, 10  
    91 00000068 F7FE                <1>     idiv    esi    
    92 0000006A 83C230              <1>     add     edx, 48  
    93 0000006D 52                  <1>     push    edx   
    94 0000006E 83F800              <1>     cmp     eax, 0   
    95 00000071 75EA                <1>     jnz     divideLoop  
    96                              <1> 
    97                              <1> printLoop:
    98 00000073 49                  <1>     dec     ecx       
    99 00000074 89E0                <1>     mov     eax, esp  
   100 00000076 E894FFFFFF          <1>     call    sprint   
   101 0000007B 58                  <1>     pop     eax    
   102 0000007C 83F900              <1>     cmp     ecx, 0   
   103 0000007F 75F2                <1>     jnz     printLoop  
   104                              <1> 
   105 00000081 5E                  <1>     pop     esi   
   106 00000082 5A                  <1>     pop     edx    
   107 00000083 59                  <1>     pop     ecx   
   108 00000084 58                  <1>     pop     eax           
   109 00000085 C3                  <1>     ret
   110                              <1> 
   111                              <1> 
   112                              <1> ;--------------- iprintLF   --------------------
   113                              <1> ; Функция вывода на экран чисел в формате ASCII
   114                              <1> ; входные данные: mov eax,<int>
   115                              <1> iprintLF:
   116 00000086 E8C9FFFFFF          <1>     call    iprint          
   117                              <1> 
   118 0000008B 50                  <1>     push    eax             
   119 0000008C B80A000000          <1>     mov     eax, 0Ah        
   120 00000091 50                  <1>     push    eax             
   121 00000092 89E0                <1>     mov     eax, esp       
   122 00000094 E876FFFFFF          <1>     call    sprint          
   123 00000099 58                  <1>     pop     eax             
   124 0000009A 58                  <1>     pop     eax             
   125 0000009B C3                  <1>     ret
   126                              <1> 
   127                              <1> ;----------------- atoi  ---------------------
   128                              <1> ; Функция преобразования ascii-код символа в целое число
   129                              <1> ; входные данные: mov eax,<int>
   130                              <1> atoi:
   131 0000009C 53                  <1>     push    ebx             
   132 0000009D 51                  <1>     push    ecx             
   133 0000009E 52                  <1>     push    edx             
   134 0000009F 56                  <1>     push    esi             
   135 000000A0 89C6                <1>     mov     esi, eax        
   136 000000A2 B800000000          <1>     mov     eax, 0          
   137 000000A7 B900000000          <1>     mov     ecx, 0          
   138                              <1>  
   139                              <1> .multiplyLoop:
   140 000000AC 31DB                <1>     xor     ebx, ebx        
   141 000000AE 8A1C0E              <1>     mov     bl, [esi+ecx]
   142 000000B1 80FB30              <1>     cmp     bl, 48 
   143 000000B4 7C14                <1>     jl      .finished 
   144 000000B6 80FB39              <1>     cmp     bl, 57  
   145 000000B9 7F0F                <1>     jg      .finished 
   146                              <1>  
   147 000000BB 80EB30              <1>     sub     bl, 48 
   148 000000BE 01D8                <1>     add     eax, ebx
   149 000000C0 BB0A000000          <1>     mov     ebx, 10  
   150 000000C5 F7E3                <1>     mul     ebx  
   151 000000C7 41                  <1>     inc     ecx   
   152 000000C8 EBE2                <1>     jmp     .multiplyLoop  
   153                              <1>  
   154                              <1> .finished:
   155 000000CA 83F900              <1>     cmp     ecx, 0  
   156 000000CD 7407                <1>     je      .restore   
   157 000000CF BB0A000000          <1>     mov     ebx, 10  
   158 000000D4 F7F3                <1>     div     ebx     
   159                              <1>  
   160                              <1> .restore:
   161 000000D6 5E                  <1>     pop     esi   
   162 000000D7 5A                  <1>     pop     edx    
   163 000000D8 59                  <1>     pop     ecx  
   164 000000D9 5B                  <1>     pop     ebx 
   165 000000DA C3                  <1>     ret
   166                              <1> 
   167                              <1> 
   168                              <1> ;------------- quit   ---------------------
   169                              <1> ; Функция завершения программы
   170                              <1> quit:
   171 000000DB BB00000000          <1>     mov     ebx, 0      
   172 000000E0 B801000000          <1>     mov     eax, 1      
   173 000000E5 CD80                <1>     int     80h
   174 000000E7 C3                  <1>     ret
     5                                  SECTION .data
     6 00000000 726561646D652E7478-     filename db 'readme.txt', 0h ; Имя файла
     6 00000009 7400               
     7 0000000B D092D0B2D0B5D0B4D0-     msg db 'Введите строку для записи в файл: ', 0h ; Сообщение
     7 00000014 B8D182D0B520D181D1-
     7 0000001D 82D180D0BED0BAD183-
     7 00000026 20D0B4D0BBD18F20D0-
     7 0000002F B7D0B0D0BFD0B8D181-
     7 00000038 D0B820D0B220D184D0-
     7 00000041 B0D0B9D0BB3A2000   
     8                                  SECTION .bss
     9 00000000 <res FFh>               contents resb 255 ; переменная для вводимой строки
    10                                  SECTION .text
    11                                  global _start
    12                                  _start:
    13                                  ; --- Печать сообщения `msg`
    14 000000E8 B8[0B000000]            mov eax,msg
    15 000000ED E81DFFFFFF              call sprint
    16                                  ; ---- Запись введеной с клавиатуры строки в `contents`
    17 000000F2 B9[00000000]            mov ecx, contents
    18 000000F7 BAFF000000              mov edx, 255
    19 000000FC E842FFFFFF              call sread
    20                                  ; --- Открытие существующего файла (`sys_open`)
    21 00000101 B902000000              mov ecx, 2 ; открываем для записи (2)
    22 00000106 BB[00000000]            mov ebx, filename
    23 0000010B B805000000              mov eax, 5
    24 00000110 CD80                    int 80h
    25                                  ; --- Запись дескриптора файла в `esi`
    26 00000112 89C6                    mov esi, eax
    27                                  ; --- Расчет длины введенной строки
    28 00000114 B8[00000000]            mov eax, contents ; в `eax` запишется количество
    29 00000119 E8E2FEFFFF              call slen ; введенных байтов
    30                                  ; --- Записываем в файл `contents` (`sys_write`)
    31 0000011E 89C2                    mov edx, eax
    32 00000120 B9[00000000]            mov ecx, contents
    33 00000125 89F3                    mov ebx, esi
    34 00000127 B804000000              mov eax, 4
    35 0000012C CD80                    int 80h
    36                                  ; --- Закрываем файл (`sys_close`)
    37 0000012E 89F3                    mov ebx, esi
    38 00000130 B806000000              mov eax, 6
    39 00000135 CD80                    int 80h
    40 00000137 E89FFFFFFF              call quit
